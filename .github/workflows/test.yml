name: Test
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  CARGO_TERM_COLOR: always
jobs:
  test_bundled:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Test bundled
      run: |
        cd sqlite-wasm-rs
        wasm-pack test --chrome --headless --features relaxed-idb
    - name: Test custom-libc
      if: matrix.os != 'windows-latest'
      run: |
        cd examples/custom-libc
        RUSTFLAGS="-L $(pwd)" wasm-pack test --chrome --headless

  test_bundled_sqlite3mc:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Test bundled sqlite3mc
      run: |
        cd sqlite-wasm-rs
        wasm-pack test --chrome --headless --features relaxed-idb,sqlite3mc

  test_diesel:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Run diesel tests
      run: |
        git clone https://github.com/diesel-rs/diesel.git
        cd diesel
        rustup target add wasm32-unknown-unknown
        cargo install wasm-bindgen-cli
        printf "[patch.crates-io]\n" >> Cargo.toml
        printf "sqlite-wasm-rs = { path = \"../sqlite-wasm-rs\" }\n" >> Cargo.toml
        WASM_BINDGEN_TEST_TIMEOUT=120 cargo xtask run-tests --wasm sqlite

  test_rusqlite:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Run rusqlite tests
      run: |
        git clone https://github.com/Spxg/rusqlite.git
        cd rusqlite
        printf "[patch.crates-io]\n" >> Cargo.toml
        printf "sqlite-wasm-rs = { path = \"../sqlite-wasm-rs\" }\n" >> Cargo.toml
        WASM_BINDGEN_TEST_TIMEOUT=60 wasm-pack test --chrome --headless --features modern-base

  test_clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check clippy
      run: |
        cd sqlite-wasm-rs
        cargo clippy --no-default-features --features precompiled,relaxed-idb -- -D warnings

  test_implement_a_vfs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Test implement-a-vfs example
      run: |
        cd examples/implement-a-vfs
        wasm-pack test --chrome --headless -- -- --nocapture

  test_fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Test rustfmt
      run: cargo fmt --check

  test_precompiled:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Test
      run: |
        cd sqlite-wasm-rs
        wasm-pack test --chrome --headless --no-default-features --features precompiled,relaxed-idb

  test_atomics:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
    - name: Test
      run: |
        cd sqlite-wasm-rs
        rustup toolchain install nightly
        rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
        RUSTFLAGS='-C target-feature=+atomics,+bulk-memory' rustup run nightly wasm-pack test --chrome --headless --features relaxed-idb -Z build-std=panic_abort,std

  test_msrv:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Setup emscripten
      uses: ./.github/actions/setup-emscripten
      with:
        version: '3.1.55'
    - name: Test MSRV
      run: |
        cd sqlite-wasm-rs
        rustup toolchain install 1.78.0
        rustup default 1.78.0
        wasm-pack test --chrome --headless --features relaxed-idb
